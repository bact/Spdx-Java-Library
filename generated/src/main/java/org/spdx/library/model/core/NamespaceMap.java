/**
 * Copyright (c) 2023 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.core;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.library.DefaultModelStore;
import org.spdx.library.InvalidSPDXAnalysisException;
import org.spdx.library.ModelCopyManager;
import org.spdx.library.model.ModelObject;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Arrays;
import java.util.Collections;
import java.util.Objects;
import java.util.Optional;
import org.spdx.library.SpdxConstants;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * A namespace map allows the creator of a collection of Elements to use shorter identifiers 
 * ("prefixes") instead of URIs to provide a more human-readable and smaller serialized 
 * representation of the Elements. 
 */
public class NamespaceMap extends ModelObject  {

	
	/**
	 * Create the NamespaceMap with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the NamespaceMap
	 */
	public NamespaceMap() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous, null));
	}

	/**
	 * @param objectUri URI or anonymous ID for the NamespaceMap
	 * @throws InvalidSPDXAnalysisException when unable to create the NamespaceMap
	 */
	public NamespaceMap(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), true);
	}

	/**
	 * @param modelStore Model store where the NamespaceMap is to be stored
	 * @param objectUri URI or anonymous ID for the NamespaceMap
	 * @param copyManager Copy manager for the NamespaceMap - can be null if copying is not required
	 * @param create true if NamespaceMap is to be created
	 * @throws InvalidSPDXAnalysisException when unable to create the NamespaceMap
	 */
	public NamespaceMap(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager,
			boolean create)	throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create);
	}

	/**
	 * Create the NamespaceMap from the builder - used in the builder class
	 * @param builder Builder to create the NamespaceMap from
	 * @throws InvalidSPDXAnalysisException when unable to create the NamespaceMap
	 */
	protected NamespaceMap(NamespaceMapBuilder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		setPrefix(builder.prefix);
		setNamespace(builder.namespace);
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "Core.NamespaceMap";
	}
	
	// Getters and Setters
	

	/**
	 * @return the prefix
	 */
	public @Nullable String getPrefix() throws InvalidSPDXAnalysisException {
		Optional<String> retval = getStringPropertyValue(SpdxConstants.CORE_PROP_PREFIX);
		return retval.isPresent() ? retval.get() : null;
	}
		/**
	 * @param prefix the prefix to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public NamespaceMap setPrefix(@Nullable String prefix) throws InvalidSPDXAnalysisException {
		if (isStrict() && Objects.isNull(prefix)) {
			throw new InvalidSPDXAnalysisException("prefix is a required property");
		}
		setPropertyValue(SpdxConstants.CORE_PROP_PREFIX, prefix);
		return this;
	}

	/**
	 * @return the namespace
	 */
	public @Nullable String getNamespace() throws InvalidSPDXAnalysisException {
		Optional<String> retval = getStringPropertyValue(SpdxConstants.CORE_PROP_NAMESPACE);
		return retval.isPresent() ? retval.get() : null;
	}
		/**
	 * @param namespace the namespace to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public NamespaceMap setNamespace(@Nullable String namespace) throws InvalidSPDXAnalysisException {
		if (isStrict() && Objects.isNull(namespace)) {
			throw new InvalidSPDXAnalysisException("namespace is a required property");
		}
		setPropertyValue(SpdxConstants.CORE_PROP_NAMESPACE, namespace);
		return this;
	}
	
	
	@Override
	public String toString() {
		return "NamespaceMap: "+getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	protected List<String> _verify(Set<String> verifiedIds, String specVersion, List<ProfileIdentifierType> profiles) {
		List<String> retval = new ArrayList<>();
		try {
			String prefix = getPrefix();
			if (Objects.isNull(prefix)) {
				retval.add("Missing prefix in NamespaceMap");
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting prefix for NamespaceMap: "+e.getMessage());
		}
		try {
			String namespace = getNamespace();
			if (Objects.isNull(namespace)) {
				retval.add("Missing namespace in NamespaceMap");
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting namespace for NamespaceMap: "+e.getMessage());
		}
		return retval;
	}
	
	public static class NamespaceMapBuilder extends ModelObjectBuilder {
	
		/**
		 * Create an NamespaceMapBuilder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public NamespaceMapBuilder(ModelObject from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous, null));
		}
	
		/**
		 * Create an NamespaceMapBuilder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @param objectUri
		 */
		public NamespaceMapBuilder(ModelObject from, String objectUri) {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
		}
		
		/**
		 * Creates a NamespaceMapBuilder
		 * @param modelStore model store for the built NamespaceMap
		 * @param objectUri objectUri for the built NamespaceMap
		 * @param copyManager optional copyManager for the built NamespaceMap
		 */
		public NamespaceMapBuilder(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		String prefix = null;
		String namespace = null;
		
		
		/**
		 * Sets the initial value of prefix
		 * @parameter prefix value to set
		 * @return this for chaining
		**/
		NamespaceMapBuilder setPrefix(String prefix) {
			this.prefix = prefix;
			return this;
		}
		
		/**
		 * Sets the initial value of namespace
		 * @parameter namespace value to set
		 * @return this for chaining
		**/
		NamespaceMapBuilder setNamespace(String namespace) {
			this.namespace = namespace;
			return this;
		}
	
		
		/**
		 * @return the NamespaceMap
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public NamespaceMap build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = modelStore.enterCriticalSection(false);
			try {
				return new NamespaceMap(this);
			} finally {
				modelStore.leaveCriticalSection(lock);
			}
		}
	}
}
