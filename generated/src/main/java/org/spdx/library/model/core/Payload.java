/**
 * Copyright (c) 2023 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.core;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.library.DefaultModelStore;
import org.spdx.library.InvalidSPDXAnalysisException;
import org.spdx.library.ModelCopyManager;
import org.spdx.library.model.ModelObject;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Collection;
import java.util.Objects;
import java.util.Optional;
import org.spdx.library.SpdxConstants;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * TODO 
 */
public class Payload extends ModelObject  {

	Collection<NamespaceMap> namespacess;
	Collection<ExternalMap> importss;
	
	/**
	 * Create the Payload with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the Payload
	 */
	public Payload() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous, null));
	}

	/**
	 * @param objectUri URI or anonymous ID for the Payload
	 * @throws InvalidSPDXAnalysisException when unable to create the Payload
	 */
	public Payload(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), true);
	}

	/**
	 * @param modelStore Model store where the Payload is to be stored
	 * @param objectUri URI or anonymous ID for the Payload
	 * @param copyManager Copy manager for the Payload - can be null if copying is not required
	 * @param create true if Payload is to be created
	 * @throws InvalidSPDXAnalysisException when unable to create the Payload
	 */
	 @SuppressWarnings("unchecked")
	public Payload(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager,
			boolean create)	throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create);
		namespacess = (Collection<NamespaceMap>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_NAMESPACES, NamespaceMap.class);
		importss = (Collection<ExternalMap>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_IMPORTS, ExternalMap.class);
	}

	/**
	 * Create the Payload from the builder - used in the builder class
	 * @param builder Builder to create the Payload from
	 * @throws InvalidSPDXAnalysisException when unable to create the Payload
	 */
	 @SuppressWarnings("unchecked")
	protected Payload(PayloadBuilder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		namespacess = (Collection<NamespaceMap>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_NAMESPACES, NamespaceMap.class);
		importss = (Collection<ExternalMap>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_IMPORTS, ExternalMap.class);
		getNamespacess().addAll(builder.namespacess);
		getImportss().addAll(builder.importss);
		setCreationInfo(builder.creationInfo);
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "Core.Payload";
	}
	
	// Getters and Setters
	public Collection<NamespaceMap> getNamespacess() {
		return namespacess;
	}
	public Collection<ExternalMap> getImportss() {
		return importss;
	}
	

		/**
	 * @return the creationInfo
	 */
	 @SuppressWarnings("unchecked")
	public Optional<CreationInfo> getCreationInfo() throws InvalidSPDXAnalysisException {
		Optional<Object> retval = getObjectPropertyValue(SpdxConstants.CORE_PROP_CREATION_INFO);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof CreationInfo)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (Optional<CreationInfo>)(Optional<?>)(retval);
		} else {
			return Optional.empty();
		}
	}
	
	/**
	 * @param creationInfo the creationInfo to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Payload setCreationInfo(@Nullable CreationInfo creationInfo) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstants.CORE_PROP_CREATION_INFO, creationInfo);
		return this;
	}
	
	
	@Override
	public String toString() {
		return "Payload: "+getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	protected List<String> _verify(Set<String> verifiedIds, String specVersion, List<ProfileIdentifierType> profiles) {
		List<String> retval = new ArrayList<>();
		Optional<CreationInfo> creationInfo;
		try {
			creationInfo = getCreationInfo();
			if (creationInfo.isPresent()) {
				retval.addAll(creationInfo.get().verify(verifiedIds, specVersion, profiles));
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting creationInfo for Payload: "+e.getMessage());
		}
		for (NamespaceMap namespaces:namespacess) {
			retval.addAll(namespaces.verify(verifiedIds, specVersion, profiles));
		}
		for (ExternalMap imports:importss) {
			retval.addAll(imports.verify(verifiedIds, specVersion, profiles));
		}
		return retval;
	}
	
	public static class PayloadBuilder extends ModelObjectBuilder {
	
		/**
		 * Create an PayloadBuilder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public PayloadBuilder(ModelObject from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous, null));
		}
	
		/**
		 * Create an PayloadBuilder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @param objectUri
		 */
		public PayloadBuilder(ModelObject from, String objectUri) {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
		}
		
		/**
		 * Creates a PayloadBuilder
		 * @param modelStore model store for the built Payload
		 * @param objectUri objectUri for the built Payload
		 * @param copyManager optional copyManager for the built Payload
		 */
		public PayloadBuilder(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		Collection<NamespaceMap> namespacess = new ArrayList<>();
		Collection<ExternalMap> importss = new ArrayList<>();
		CreationInfo creationInfo = null;
		
		
		/**
		 * Adds a namespaces to the initial collection
		 * @parameter namespaces namespaces to add
		 * @return this for chaining
		**/
		PayloadBuilder addNamespaces(NamespaceMap namespaces) {
			if (Objects.nonNull(namespaces)) {
				namespacess.add(namespaces);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial namespaces collection
		 * @parameter namespacesCollection collection to initialize the namespaces
		 * @return this for chaining
		**/
		PayloadBuilder addAllNamespaces(Collection<NamespaceMap> namespacesCollection) {
			if (Objects.nonNull(namespacesCollection)) {
				namespacess.addAll(namespacesCollection);
			}
			return this;
		}
		
		/**
		 * Adds a imports to the initial collection
		 * @parameter imports imports to add
		 * @return this for chaining
		**/
		PayloadBuilder addImports(ExternalMap imports) {
			if (Objects.nonNull(imports)) {
				importss.add(imports);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial imports collection
		 * @parameter importsCollection collection to initialize the imports
		 * @return this for chaining
		**/
		PayloadBuilder addAllImports(Collection<ExternalMap> importsCollection) {
			if (Objects.nonNull(importsCollection)) {
				importss.addAll(importsCollection);
			}
			return this;
		}
		
		/**
		 * Sets the initial value of creationInfo
		 * @parameter creationInfo value to set
		 * @return this for chaining
		**/
		PayloadBuilder setCreationInfo(CreationInfo creationInfo) {
			this.creationInfo = creationInfo;
			return this;
		}
	
		
		/**
		 * @return the Payload
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public Payload build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = modelStore.enterCriticalSection(false);
			try {
				return new Payload(this);
			} finally {
				modelStore.leaveCriticalSection(lock);
			}
		}
	}
}
