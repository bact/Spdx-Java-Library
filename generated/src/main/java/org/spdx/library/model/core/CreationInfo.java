/**
 * Copyright (c) 2023 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.core;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.library.DefaultModelStore;
import org.spdx.library.InvalidSPDXAnalysisException;
import org.spdx.library.ModelCopyManager;
import org.spdx.library.model.ModelObject;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;
import java.util.Optional;
import org.spdx.library.SpdxConstants;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * The CreationInfo provides information about who created the Element, and when and 
 * how it was created. The dateTime created is often the date of last change (e.g., a git 
 * commit date), not the date when the SPDX data was created, as doing so supports reproducible 
 * builds. 
 */
public class CreationInfo extends ModelObject  {

	Collection<Tool> createdUsings;
	Collection<Agent> createdBys;
	Collection<String> createds;
	Collection<String> dataLicenses;
	Collection<String> specVersions;
	Collection<ProfileIdentifierType> profiles;
	
	/**
	 * Create the CreationInfo with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the CreationInfo
	 */
	public CreationInfo() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous, null));
	}

	/**
	 * @param objectUri URI or anonymous ID for the CreationInfo
	 * @throws InvalidSPDXAnalysisException when unable to create the CreationInfo
	 */
	public CreationInfo(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), true);
	}

	/**
	 * @param modelStore Model store where the CreationInfo is to be stored
	 * @param objectUri URI or anonymous ID for the CreationInfo
	 * @param copyManager Copy manager for the CreationInfo - can be null if copying is not required
	 * @param create true if CreationInfo is to be created
	 * @throws InvalidSPDXAnalysisException when unable to create the CreationInfo
	 */
	 @SuppressWarnings("unchecked")
	public CreationInfo(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager,
			boolean create)	throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create);
		createdUsings = (Collection<Tool>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_CREATED_USING, Tool.class);
		createdBys = (Collection<Agent>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_CREATED_BY, Agent.class);
		profiles = (Collection<ProfileIdentifierType>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_PROFILE, ProfileIdentifierType.class);
		createds = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_CREATED, String.class);
		dataLicenses = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_DATA_LICENSE, String.class);
		specVersions = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_SPEC_VERSION, String.class);
	}

	/**
	 * Create the CreationInfo from the builder - used in the builder class
	 * @param builder Builder to create the CreationInfo from
	 * @throws InvalidSPDXAnalysisException when unable to create the CreationInfo
	 */
	 @SuppressWarnings("unchecked")
	protected CreationInfo(CreationInfoBuilder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		createdUsings = (Collection<Tool>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_CREATED_USING, Tool.class);
		createdBys = (Collection<Agent>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_CREATED_BY, Agent.class);
		profiles = (Collection<ProfileIdentifierType>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_PROFILE, ProfileIdentifierType.class);
		createds = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_CREATED, String.class);
		dataLicenses = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_DATA_LICENSE, String.class);
		specVersions = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_SPEC_VERSION, String.class);
		getCreatedUsings().addAll(builder.createdUsings);
		getCreatedBys().addAll(builder.createdBys);
		getProfiles().addAll(builder.profiles);
		getCreateds().addAll(builder.createds);
		getDataLicenses().addAll(builder.dataLicenses);
		getSpecVersions().addAll(builder.specVersions);
		setComment(builder.comment);
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "Core.CreationInfo";
	}
	
	// Getters and Setters
	public Collection<Tool> getCreatedUsings() {
		return createdUsings;
	}
	public Collection<Agent> getCreatedBys() {
		return createdBys;
	}
	public Collection<ProfileIdentifierType> getProfiles() {
		return profiles;
	}
	public Collection<String> getCreateds() {
		return createds;
	}
	public Collection<String> getDataLicenses() {
		return dataLicenses;
	}
	public Collection<String> getSpecVersions() {
		return specVersions;
	}
	

		/**
	 * @return the comment
	 */
	public Optional<String> getComment() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstants.CORE_PROP_COMMENT);
	}
	/**
	 * @param comment the comment to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public CreationInfo setComment(@Nullable String comment) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstants.CORE_PROP_COMMENT, comment);
		return this;
	}
	
	
	@Override
	public String toString() {
		return "CreationInfo: "+getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	protected List<String> _verify(Set<String> verifiedIds, String specVersion, List<ProfileIdentifierType> profiles) {
		List<String> retval = new ArrayList<>();
		try {
			@SuppressWarnings("unused")
			Optional<String> comment = getComment();
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting comment for CreationInfo: "+e.getMessage());
		}
		for (Tool createdUsing:createdUsings) {
			retval.addAll(createdUsing.verify(verifiedIds, specVersion, profiles));
		}
		for (Agent createdBy:createdBys) {
			retval.addAll(createdBy.verify(verifiedIds, specVersion, profiles));
		}
		return retval;
	}
	
	public static class CreationInfoBuilder extends ModelObjectBuilder {
	
		/**
		 * Create an CreationInfoBuilder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public CreationInfoBuilder(ModelObject from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous, null));
		}
	
		/**
		 * Create an CreationInfoBuilder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @param objectUri
		 */
		public CreationInfoBuilder(ModelObject from, String objectUri) {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
		}
		
		/**
		 * Creates a CreationInfoBuilder
		 * @param modelStore model store for the built CreationInfo
		 * @param objectUri objectUri for the built CreationInfo
		 * @param copyManager optional copyManager for the built CreationInfo
		 */
		public CreationInfoBuilder(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		Collection<Tool> createdUsings = new ArrayList<>();
		Collection<Agent> createdBys = new ArrayList<>();
		Collection<ProfileIdentifierType> profiles = new ArrayList<>();
		Collection<String> createds = new ArrayList<>();
		Collection<String> dataLicenses = new ArrayList<>();
		Collection<String> specVersions = new ArrayList<>();
		String comment = null;
		
		
		/**
		 * Adds a createdUsing to the initial collection
		 * @parameter createdUsing createdUsing to add
		 * @return this for chaining
		**/
		CreationInfoBuilder addCreatedUsing(Tool createdUsing) {
			if (Objects.nonNull(createdUsing)) {
				createdUsings.add(createdUsing);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial createdUsing collection
		 * @parameter createdUsingCollection collection to initialize the createdUsing
		 * @return this for chaining
		**/
		CreationInfoBuilder addAllCreatedUsing(Collection<Tool> createdUsingCollection) {
			if (Objects.nonNull(createdUsingCollection)) {
				createdUsings.addAll(createdUsingCollection);
			}
			return this;
		}
		
		/**
		 * Adds a createdBy to the initial collection
		 * @parameter createdBy createdBy to add
		 * @return this for chaining
		**/
		CreationInfoBuilder addCreatedBy(Agent createdBy) {
			if (Objects.nonNull(createdBy)) {
				createdBys.add(createdBy);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial createdBy collection
		 * @parameter createdByCollection collection to initialize the createdBy
		 * @return this for chaining
		**/
		CreationInfoBuilder addAllCreatedBy(Collection<Agent> createdByCollection) {
			if (Objects.nonNull(createdByCollection)) {
				createdBys.addAll(createdByCollection);
			}
			return this;
		}
		
		/**
		 * Adds a profile to the initial collection
		 * @parameter profile profile to add
		 * @return this for chaining
		**/
		CreationInfoBuilder addProfile(ProfileIdentifierType profile) {
			if (Objects.nonNull(profile)) {
				profiles.add(profile);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial profile collection
		 * @parameter profileCollection collection to initialize the profile
		 * @return this for chaining
		**/
		CreationInfoBuilder addAllProfile(Collection<ProfileIdentifierType> profileCollection) {
			if (Objects.nonNull(profileCollection)) {
				profiles.addAll(profileCollection);
			}
			return this;
		}
		
		/**
		 * Adds a created to the initial collection
		 * @parameter created created to add
		 * @return this for chaining
		**/
		CreationInfoBuilder addCreated(String created) {
			if (Objects.nonNull(created)) {
				createds.add(created);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial created collection
		 * @parameter createdCollection collection to initialize the created
		 * @return this for chaining
		**/
		CreationInfoBuilder addAllCreated(Collection<String> createdCollection) {
			if (Objects.nonNull(createdCollection)) {
				createds.addAll(createdCollection);
			}
			return this;
		}
		
		/**
		 * Adds a dataLicense to the initial collection
		 * @parameter dataLicense dataLicense to add
		 * @return this for chaining
		**/
		CreationInfoBuilder addDataLicense(String dataLicense) {
			if (Objects.nonNull(dataLicense)) {
				dataLicenses.add(dataLicense);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial dataLicense collection
		 * @parameter dataLicenseCollection collection to initialize the dataLicense
		 * @return this for chaining
		**/
		CreationInfoBuilder addAllDataLicense(Collection<String> dataLicenseCollection) {
			if (Objects.nonNull(dataLicenseCollection)) {
				dataLicenses.addAll(dataLicenseCollection);
			}
			return this;
		}
		
		/**
		 * Adds a specVersion to the initial collection
		 * @parameter specVersion specVersion to add
		 * @return this for chaining
		**/
		CreationInfoBuilder addSpecVersion(String specVersion) {
			if (Objects.nonNull(specVersion)) {
				specVersions.add(specVersion);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial specVersion collection
		 * @parameter specVersionCollection collection to initialize the specVersion
		 * @return this for chaining
		**/
		CreationInfoBuilder addAllSpecVersion(Collection<String> specVersionCollection) {
			if (Objects.nonNull(specVersionCollection)) {
				specVersions.addAll(specVersionCollection);
			}
			return this;
		}
		
		/**
		 * Sets the initial value of comment
		 * @parameter comment value to set
		 * @return this for chaining
		**/
		CreationInfoBuilder setComment(String comment) {
			this.comment = comment;
			return this;
		}
	
		
		/**
		 * @return the CreationInfo
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public CreationInfo build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = modelStore.enterCriticalSection(false);
			try {
				return new CreationInfo(this);
			} finally {
				modelStore.leaveCriticalSection(lock);
			}
		}
	}
}
