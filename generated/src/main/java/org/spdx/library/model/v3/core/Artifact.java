/**
 * Copyright (c) 2023 Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package org.spdx.library.model.v3.core;

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.spdx.library.DefaultModelStore;
import org.spdx.library.InvalidSPDXAnalysisException;
import org.spdx.library.ModelCopyManager;
import org.spdx.library.model.ModelObject;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;
import org.spdx.storage.IModelStore.IModelStoreLock;

import java.util.Collection;
import java.util.Objects;
import java.util.Optional;
import org.spdx.library.SpdxConstants;

/**
 * DO NOT EDIT - this file is generated by the Owl to Java Utility 
 * See: https://github.com/spdx/tools-java 
 * 
 * An artifact is a distinct article or unit within the digital domain, such as an electronic 
 * file, a software package, a device or an element of data. 
 */
public class Artifact extends Element  {

	Collection<Agent> suppliedBys;
	Collection<Agent> originatedBys;
	Collection<String> standards;
	
	/**
	 * Create the Artifact with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the Artifact
	 */
	public Artifact() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous, null));
	}

	/**
	 * @param objectUri URI or anonymous ID for the Artifact
	 * @throws InvalidSPDXAnalysisException when unable to create the Artifact
	 */
	public Artifact(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), true);
	}

	/**
	 * @param modelStore Model store where the Artifact is to be stored
	 * @param objectUri URI or anonymous ID for the Artifact
	 * @param copyManager Copy manager for the Artifact - can be null if copying is not required
	 * @param create true if Artifact is to be created
	 * @throws InvalidSPDXAnalysisException when unable to create the Artifact
	 */
	 @SuppressWarnings("unchecked")
	public Artifact(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager,
			boolean create)	throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create);
		suppliedBys = (Collection<Agent>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_SUPPLIED_BY, Agent.class);
		originatedBys = (Collection<Agent>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_ORIGINATED_BY, Agent.class);
		standards = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_STANDARD, String.class);
	}

	/**
	 * Create the Artifact from the builder - used in the builder class
	 * @param builder Builder to create the Artifact from
	 * @throws InvalidSPDXAnalysisException when unable to create the Artifact
	 */
	 @SuppressWarnings("unchecked")
	protected Artifact(ArtifactBuilder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		suppliedBys = (Collection<Agent>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_SUPPLIED_BY, Agent.class);
		originatedBys = (Collection<Agent>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_ORIGINATED_BY, Agent.class);
		standards = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstants.CORE_PROP_STANDARD, String.class);
		getSuppliedBys().addAll(builder.suppliedBys);
		getOriginatedBys().addAll(builder.originatedBys);
		getStandards().addAll(builder.standards);
		setValidUntilTime(builder.validUntilTime);
		setReleaseTime(builder.releaseTime);
		setBuiltTime(builder.builtTime);
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "Core.Artifact";
	}
	
	// Getters and Setters
	public Collection<Agent> getSuppliedBys() {
		return suppliedBys;
	}
	public Collection<Agent> getOriginatedBys() {
		return originatedBys;
	}
	public Collection<String> getStandards() {
		return standards;
	}
	

		/**
	 * @return the validUntilTime
	 */
	 @SuppressWarnings("unchecked")
	public Optional<DateTime> getValidUntilTime() throws InvalidSPDXAnalysisException {
		Optional<Object> retval = getObjectPropertyValue(SpdxConstants.CORE_PROP_VALID_UNTIL_TIME);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof DateTime)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (Optional<DateTime>)(Optional<?>)(retval);
		} else {
			return Optional.empty();
		}
	}
	
	/**
	 * @param validUntilTime the validUntilTime to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Artifact setValidUntilTime(@Nullable DateTime validUntilTime) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstants.CORE_PROP_VALID_UNTIL_TIME, validUntilTime);
		return this;
	}

		/**
	 * @return the releaseTime
	 */
	 @SuppressWarnings("unchecked")
	public Optional<DateTime> getReleaseTime() throws InvalidSPDXAnalysisException {
		Optional<Object> retval = getObjectPropertyValue(SpdxConstants.CORE_PROP_RELEASE_TIME);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof DateTime)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (Optional<DateTime>)(Optional<?>)(retval);
		} else {
			return Optional.empty();
		}
	}
	
	/**
	 * @param releaseTime the releaseTime to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Artifact setReleaseTime(@Nullable DateTime releaseTime) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstants.CORE_PROP_RELEASE_TIME, releaseTime);
		return this;
	}

		/**
	 * @return the builtTime
	 */
	 @SuppressWarnings("unchecked")
	public Optional<DateTime> getBuiltTime() throws InvalidSPDXAnalysisException {
		Optional<Object> retval = getObjectPropertyValue(SpdxConstants.CORE_PROP_BUILT_TIME);
		if (retval.isPresent()) {
			if (!(retval.get() instanceof DateTime)) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for ");
			}
			return (Optional<DateTime>)(Optional<?>)(retval);
		} else {
			return Optional.empty();
		}
	}
	
	/**
	 * @param builtTime the builtTime to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public Artifact setBuiltTime(@Nullable DateTime builtTime) throws InvalidSPDXAnalysisException {
		setPropertyValue(SpdxConstants.CORE_PROP_BUILT_TIME, builtTime);
		return this;
	}
	
	
	@Override
	public String toString() {
		return "Artifact: "+getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	protected List<String> _verify(Set<String> verifiedIds, String specVersion, List<ProfileIdentifierType> profiles) {
		List<String> retval = new ArrayList<>();
		retval.addAll(super._verify(verifiedIds, specVersion, profiles));
		Optional<DateTime> validUntilTime;
		try {
			validUntilTime = getValidUntilTime();
			if (validUntilTime.isPresent()) {
				retval.addAll(validUntilTime.get().verify(verifiedIds, specVersion, profiles));
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting validUntilTime for Artifact: "+e.getMessage());
		}
		Optional<DateTime> releaseTime;
		try {
			releaseTime = getReleaseTime();
			if (releaseTime.isPresent()) {
				retval.addAll(releaseTime.get().verify(verifiedIds, specVersion, profiles));
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting releaseTime for Artifact: "+e.getMessage());
		}
		Optional<DateTime> builtTime;
		try {
			builtTime = getBuiltTime();
			if (builtTime.isPresent()) {
				retval.addAll(builtTime.get().verify(verifiedIds, specVersion, profiles));
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting builtTime for Artifact: "+e.getMessage());
		}
		for (Agent suppliedBy:suppliedBys) {
			retval.addAll(suppliedBy.verify(verifiedIds, specVersion, profiles));
		}
		for (Agent originatedBy:originatedBys) {
			retval.addAll(originatedBy.verify(verifiedIds, specVersion, profiles));
		}
		return retval;
	}
	
	public static class ArtifactBuilder extends ElementBuilder {
	
		/**
		 * Create an ArtifactBuilder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public ArtifactBuilder(ModelObject from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous, null));
		}
	
		/**
		 * Create an ArtifactBuilder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @param objectUri
		 */
		public ArtifactBuilder(ModelObject from, String objectUri) {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
		}
		
		/**
		 * Creates a ArtifactBuilder
		 * @param modelStore model store for the built Artifact
		 * @param objectUri objectUri for the built Artifact
		 * @param copyManager optional copyManager for the built Artifact
		 */
		public ArtifactBuilder(IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		Collection<Agent> suppliedBys = new ArrayList<>();
		Collection<Agent> originatedBys = new ArrayList<>();
		Collection<String> standards = new ArrayList<>();
		DateTime validUntilTime = null;
		DateTime releaseTime = null;
		DateTime builtTime = null;
		
		
		/**
		 * Adds a suppliedBy to the initial collection
		 * @parameter suppliedBy suppliedBy to add
		 * @return this for chaining
		**/
		public ArtifactBuilder addSuppliedBy(Agent suppliedBy) {
			if (Objects.nonNull(suppliedBy)) {
				suppliedBys.add(suppliedBy);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial suppliedBy collection
		 * @parameter suppliedByCollection collection to initialize the suppliedBy
		 * @return this for chaining
		**/
		public ArtifactBuilder addAllSuppliedBy(Collection<Agent> suppliedByCollection) {
			if (Objects.nonNull(suppliedByCollection)) {
				suppliedBys.addAll(suppliedByCollection);
			}
			return this;
		}
		
		/**
		 * Adds a originatedBy to the initial collection
		 * @parameter originatedBy originatedBy to add
		 * @return this for chaining
		**/
		public ArtifactBuilder addOriginatedBy(Agent originatedBy) {
			if (Objects.nonNull(originatedBy)) {
				originatedBys.add(originatedBy);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial originatedBy collection
		 * @parameter originatedByCollection collection to initialize the originatedBy
		 * @return this for chaining
		**/
		public ArtifactBuilder addAllOriginatedBy(Collection<Agent> originatedByCollection) {
			if (Objects.nonNull(originatedByCollection)) {
				originatedBys.addAll(originatedByCollection);
			}
			return this;
		}
		
		/**
		 * Adds a standard to the initial collection
		 * @parameter standard standard to add
		 * @return this for chaining
		**/
		public ArtifactBuilder addStandard(String standard) {
			if (Objects.nonNull(standard)) {
				standards.add(standard);
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial standard collection
		 * @parameter standardCollection collection to initialize the standard
		 * @return this for chaining
		**/
		public ArtifactBuilder addAllStandard(Collection<String> standardCollection) {
			if (Objects.nonNull(standardCollection)) {
				standards.addAll(standardCollection);
			}
			return this;
		}
		
		/**
		 * Sets the initial value of validUntilTime
		 * @parameter validUntilTime value to set
		 * @return this for chaining
		**/
		public ArtifactBuilder setValidUntilTime(DateTime validUntilTime) {
			this.validUntilTime = validUntilTime;
			return this;
		}
		
		/**
		 * Sets the initial value of releaseTime
		 * @parameter releaseTime value to set
		 * @return this for chaining
		**/
		public ArtifactBuilder setReleaseTime(DateTime releaseTime) {
			this.releaseTime = releaseTime;
			return this;
		}
		
		/**
		 * Sets the initial value of builtTime
		 * @parameter builtTime value to set
		 * @return this for chaining
		**/
		public ArtifactBuilder setBuiltTime(DateTime builtTime) {
			this.builtTime = builtTime;
			return this;
		}
	
		
		/**
		 * @return the Artifact
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public Artifact build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = modelStore.enterCriticalSection(false);
			try {
				return new Artifact(this);
			} finally {
				modelStore.leaveCriticalSection(lock);
			}
		}
	}
}
